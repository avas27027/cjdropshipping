"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const jet_validator_1 = __importDefault(require("jet-validator"));
const Paths_1 = __importDefault(require("./constants/Paths"));
const User_1 = __importDefault(require("@src/models/User"));
const UserRoutes_1 = __importDefault(require("./UserRoutes"));
const KeyRoutes_1 = __importDefault(require("./KeyRoutes"));
const ProductsRoutes_1 = __importDefault(require("./ProductsRoutes"));
const OrderRoutes_1 = __importDefault(require("./OrderRoutes"));
const Order_1 = __importDefault(require("@src/models/Order"));
const PaymentRoutes_1 = __importDefault(require("./PaymentRoutes"));
const apiRouter = (0, express_1.Router)(), validate = (0, jet_validator_1.default)();
const userRouter = (0, express_1.Router)();
const keyRouter = (0, express_1.Router)();
const productRouter = (0, express_1.Router)();
const orderRouter = (0, express_1.Router)();
const paymentRouter = (0, express_1.Router)();
userRouter.get(Paths_1.default.Users.Get, UserRoutes_1.default.getAll);
userRouter.post(Paths_1.default.Users.Add, validate(['user', User_1.default.isUser]), UserRoutes_1.default.add);
userRouter.put(Paths_1.default.Users.Update, validate(['user', User_1.default.isUser]), UserRoutes_1.default.update);
userRouter.delete(Paths_1.default.Users.Delete, validate(['id', 'number', 'params']), UserRoutes_1.default.delete);
keyRouter.get(Paths_1.default.Key.Get, KeyRoutes_1.default.getKey);
productRouter.get(Paths_1.default.Product.Categories, ProductsRoutes_1.default.getCategoryList);
productRouter.get(Paths_1.default.Product.All, ProductsRoutes_1.default.getProductList);
productRouter.get(Paths_1.default.Product.Comment, validate(['pid', 'string', 'params']), ProductsRoutes_1.default.getProductComments);
productRouter.get(Paths_1.default.Product.Detail, validate(['pid', 'string', 'params']), ProductsRoutes_1.default.getProductDetails);
orderRouter.get(Paths_1.default.Order.All, OrderRoutes_1.default.getOrders);
orderRouter.post(Paths_1.default.Order.Add, validate(['order', Order_1.default.isOrder], 'JWT'), OrderRoutes_1.default.postOrder);
orderRouter.get(Paths_1.default.Order.User, validate('JWT'), OrderRoutes_1.default.getOrdersByUser);
paymentRouter.post(Paths_1.default.Payments.Create, PaymentRoutes_1.default.paypalCreateOrder);
paymentRouter.post(Paths_1.default.Payments.Capture, PaymentRoutes_1.default.paypalCaptureOrder);
apiRouter.use(Paths_1.default.Users.Base, userRouter);
apiRouter.use(Paths_1.default.Key.Base, keyRouter);
apiRouter.use(Paths_1.default.Product.Base, productRouter);
apiRouter.use(Paths_1.default.Order.Base, orderRouter);
apiRouter.use(Paths_1.default.Payments.Base, paymentRouter);
exports.default = apiRouter;
